<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8" />
  <title>Godot MMO Voxel ローカルセットアップ</title>
  <hta:application
    id="setupApp"
    applicationname="Godot MMO Voxel Setup"
    border="thin"
    caption="yes"
    showintaskbar="yes"
    singleinstance="yes"
    scroll="yes"
    sysmenu="yes"
  />
  <style>
    html, body { height: 100%; }
    body { font-family: "Yu Gothic", "Segoe UI", sans-serif; background: #f5f7fb; margin: 0; }
    .container { min-height: 100%; padding: 24px; overflow-y: auto; box-sizing: border-box; }
    h1 { margin-top: 0; color: #1d4ed8; }
    .section { background: #ffffff; border-radius: 10px; box-shadow: 0 4px 14px rgba(15, 23, 42, 0.1); padding: 18px 22px; margin-bottom: 18px; }
    .section h2 { margin: 0 0 10px; font-size: 18px; }
    label { display: block; margin-bottom: 4px; font-weight: bold; }
    input[type="text"] { width: 100%; padding: 8px; border-radius: 6px; border: 1px solid #cbd5f5; margin-bottom: 10px; }
    button { background: #2563eb; color: #fff; border: none; border-radius: 6px; padding: 10px 16px; margin-right: 8px; cursor: pointer; font-size: 14px; }
    button:hover { background: #1d4ed8; }
    button:disabled { background: #94a3b8; cursor: not-allowed; }
    #log, #git-log { background: #0f172a; color: #e2e8f0; padding: 12px; border-radius: 8px; height: 240px; overflow-y: auto; white-space: pre-wrap; font-family: "Cascadia Code", "Consolas", monospace; }
    .note { margin-top: 10px; font-size: 12px; color: #475569; }
    .tabs { display: flex; gap: 8px; margin-bottom: 16px; }
    .tab-button { background: #e2e8f0; color: #1f2937; border: none; border-radius: 6px 6px 0 0; padding: 10px 16px; cursor: pointer; font-weight: bold; }
    .tab-button.active { background: #2563eb; color: #ffffff; }
    .tab-content { display: none; }
    .tab-content.active { display: block; }
    textarea { width: 100%; height: 140px; border-radius: 6px; border: 1px solid #cbd5f5; padding: 10px; font-family: "Cascadia Code", "Consolas", monospace; }
  </style>
  <script language="javascript" type="text/javascript">
    var shell = new ActiveXObject("WScript.Shell");
    var fso = new ActiveXObject("Scripting.FileSystemObject");

    function resolveRepoPath() {
      var htaPath = unescape(window.location.pathname);
      if (htaPath.charAt(0) === "/" && htaPath.indexOf(":") === 2) {
        htaPath = htaPath.substring(1);
      }
      htaPath = htaPath.replace(/\//g, "\\");
      var htaDir = fso.GetParentFolderName(htaPath);
      return fso.GetParentFolderName(htaDir);
    }

    var repoPath = resolveRepoPath();

    function appendLog(text) {
      var activeLogId = currentTab === 'setup' ? "log" : "git-log";
      var log = document.getElementById(activeLogId);
      var timestamp = new Date().toLocaleTimeString();
      var entry = "[" + timestamp + "] " + text;
      if (log.innerText.length > 0) {
        log.innerText += "\n" + entry;
      } else {
        log.innerText = entry;
      }
      log.scrollTop = log.scrollHeight;
    }

    function sanitizeOutput(text) {
      return text.replace(/\u001b\[[0-9;]*m/g, "");
    }

    function readFileUtf8(path) {
      var stream = new ActiveXObject("ADODB.Stream");
      stream.Type = 2; // text
      stream.Mode = 3; // read/write
      stream.Charset = "utf-8";
      stream.Open();
      stream.LoadFromFile(path);
      var text = stream.ReadText();
      stream.Close();
      return text;
    }

    function createTempPs1(content, logPath) {
      var scriptPath = fso.BuildPath(fso.GetSpecialFolder(2), "setup_launcher_" + (new Date().getTime()) + ".ps1");
      var stream = new ActiveXObject("ADODB.Stream");
      stream.Type = 2;
      stream.Charset = "utf-8";
      stream.Open();
      var escapedLog = logPath.replace(/'/g, "''");
      var escapedRepo = repoPath.replace(/'/g, "''");
      var script = "[Console]::OutputEncoding = [System.Text.Encoding]::UTF8\n" +
        "$ErrorActionPreference = 'Stop'\n" +
        "$ExitCode = 0\n" +
        "Set-Location -LiteralPath '" + escapedRepo + "'\n" +
        "try {\n" +
        "    $output = & {\n" + content + "\n" +
        "    } *>&1\n" +
        "    if ($null -ne $LASTEXITCODE -and $LASTEXITCODE -ne 0) { $ExitCode = $LASTEXITCODE }\n" +
        "    $output | Out-File -LiteralPath '" + escapedLog + "' -Encoding UTF8\n" +
        "} catch {\n" +
        "    $_ | Out-String | Out-File -LiteralPath '" + escapedLog + "' -Encoding UTF8\n" +
        "    $ExitCode = 1\n" +
        "}\n" +
        "exit $ExitCode\n";
      stream.WriteText(script);
      stream.SaveToFile(scriptPath, 2);
      stream.Close();
      return scriptPath;
    }

    function runCommand(command) {
      try {
        appendLog("実行: " + command);
        shell.CurrentDirectory = repoPath;
        var logPath = fso.BuildPath(fso.GetSpecialFolder(2), "setup_launcher_" + (new Date().getTime()) + ".log");
        var scriptPath = createTempPs1(command, logPath);
        var pwshCmd = 'pwsh -NoLogo -NoProfile -NonInteractive -ExecutionPolicy Bypass -File "' + scriptPath + '"';
        var exitCode = shell.Run(pwshCmd, 0, true);

        if (fso.FileExists(logPath)) {
          var output = sanitizeOutput(readFileUtf8(logPath));
          if (output.length === 0) {
            appendLog("(出力なし)");
          } else {
            appendLog(output);
          }
          try { fso.DeleteFile(logPath); } catch (ignore) {}
        } else {
          appendLog("(ログファイルが生成されませんでした)");
        }

        try { fso.DeleteFile(scriptPath); } catch (ignore) {}

        if (exitCode === 0) {
          appendLog("結果: ✅ 成功 (終了コード 0)");
        } else {
          appendLog("結果: ❌ 失敗 (終了コード " + exitCode + ")");
        }
      } catch (e) {
        appendLog("エラー: " + e.message);
      }
    }

    function runSetup() {
      disableButtons(true);
      runCommand("& '.\\tools\\scripts\\setup-project.ps1'");
      disableButtons(false);
    }

    function runBuild(target) {
      disableButtons(true);
      var godotPath = document.getElementById("godotPath").value;
      if (!fso.FileExists(godotPath)) {
        appendLog("指定の Godot 実行ファイルが見つかりません: " + godotPath);
        disableButtons(false);
        return;
      }
      var psGodotPath = "'" + godotPath.replace(/'/g, "''") + "'";
      var cmd = "& '.\\operations\\scripts\\build.ps1' -Target " + target + " -GodotPath " + psGodotPath;
      runCommand(cmd);
      disableButtons(false);
    }

    function openRequirements() {
      var path = repoPath + "\\operations\\requirements.md";
      if (fso.FileExists(path)) {
        shell.Run('cmd.exe /c start "" "' + path + '"', 0, false);
      } else {
        appendLog("requirements.md が見つかりません");
      }
    }

    function openDocs() {
      var path = repoPath + "\\operations\\setup_launcher.hta";
      shell.Run('cmd.exe /c start "" "' + path + '"', 0, false);
    }

    function disableButtons(state) {
      var buttons = document.getElementsByTagName("button");
      for (var i = 0; i < buttons.length; i++) {
        if (buttons[i].id !== "openThis") {
          buttons[i].disabled = state;
        }
      }
    }

    window.onload = function() {
      document.getElementById("repoPath").innerText = repoPath;
      document.getElementById("log").innerText = "";
      document.getElementById("git-log").innerText = "";
      document.getElementById("repoPathGit").innerText = repoPath;
      switchTab('setup');
    };

    var currentTab = 'setup';

    function switchTab(tab) {
      currentTab = tab;
      var setupBtn = document.getElementById('tab-setup');
      var gitBtn = document.getElementById('tab-git');
      if (setupBtn) {
        setupBtn.className = 'tab-button' + (tab === 'setup' ? ' active' : '');
      }
      if (gitBtn) {
        gitBtn.className = 'tab-button' + (tab === 'git' ? ' active' : '');
      }

      var setupContent = document.getElementById('content-setup');
      var gitContent = document.getElementById('content-git');
      if (setupContent) {
        setupContent.style.display = tab === 'setup' ? 'block' : 'none';
      }
      if (gitContent) {
        gitContent.style.display = tab === 'git' ? 'block' : 'none';
      }
    }

    function trimString(value) {
      return value.replace(/^\s+|\s+$/g, "");
    }

    function runGitCommand() {
      disableButtons(true);
      var gitInput = trimString(document.getElementById("git-command").value);
      if (gitInput.length === 0) {
        appendLog("Git コマンドが入力されていません");
        disableButtons(false);
        return;
      }
      runCommand(gitInput);
      disableButtons(false);
    }

    function setGitCommand(command) {
      document.getElementById("git-command").value = command;
    }

    function setGitCommitCommand() {
      setGitCommand('git commit -m "<edit message>"');
    }

    function setGitWorkflowCommand() {
      var lines = [
        "git status",
        "",
        "# 必要に応じて変更内容を確認",
        "git add .",
        "git commit -m \"<edit message>\"",
        "git push origin main"
      ];
      setGitCommand(lines.join("\n"));
    }

    function clearLog(target) {
      var logId = target === 'git' ? 'git-log' : 'log';
      var logBox = document.getElementById(logId);
      if (logBox) {
        logBox.innerText = '';
      }
    }
  </script>
</head>
<body>
  <div class="container">
  <h1>Godot MMO Voxel セットアップランチャー</h1>

  <div class="tabs">
    <button id="tab-setup" class="tab-button" onclick="switchTab('setup')">セットアップ・ビルド</button>
    <button id="tab-git" class="tab-button" onclick="switchTab('git')">Git 操作</button>
  </div>

  <div id="content-setup" class="tab-content">
    <div class="section">
      <h2>リポジトリの場所</h2>
      <p id="repoPath"></p>
      <div class="note">必要に応じて Git で最新化してから実行してください。</div>
    </div>

    <div class="section">
      <h2>手順ショートカット</h2>
      <button onclick="runSetup()">1) 初期セットアップ (setup-project.ps1)</button>
      <br/><br/>
      <label for="godotPath">Godot 実行ファイルパス</label>
      <input type="text" id="godotPath" value="G:\\Godot_ENGINE\\godot\\bin\\godot.windows.editor.x86_64.exe" />
      <button onclick="runBuild('windows')">2) Windows ビルド</button>
      <button onclick="runBuild('server')">3) Dedicated Server ビルド</button>
      <div class="note">Export Templates が不足している場合は先に導入してください。</div>
    </div>

    <div class="section">
      <h2>関連ドキュメント</h2>
      <button onclick="openRequirements()">必須ツール要件 (requirements.md)</button>
      <button id="openThis" onclick="openDocs()">このランチャーを別ウィンドウで開く</button>
    </div>

    <div class="section">
      <h2>実行ログ</h2>
      <div style="margin-bottom: 8px;">
        <button onclick="clearLog('setup')">ログをクリア</button>
      </div>
      <div id="log"></div>
    </div>
  </div>

  <div id="content-git" class="tab-content">
    <div class="section">
      <h2>Git コマンド実行</h2>
      <label for="git-command">コマンド (例: git status)</label>
      <textarea id="git-command" placeholder="git status"></textarea>
      <div style="margin-bottom: 8px;">
        <button onclick="setGitCommand('git status')">git status</button>
        <button onclick="setGitCommand('git pull')">git pull</button>
        <button onclick="setGitCommand('git fetch --all --prune')">git fetch --all --prune</button>
        <button onclick="setGitCommand('git log --oneline -5')">git log --oneline -5</button>
        <button onclick="setGitCommand('git diff HEAD')">git diff HEAD</button>
        <button onclick="setGitCommand('git add .')">git add .</button>
        <button onclick="setGitCommitCommand()">git commit</button>
        <button onclick="setGitCommand('git push origin main')">git push origin main</button>
        <button onclick="setGitWorkflowCommand()">変更をコミットしてプッシュ</button>
      </div>
      <button onclick="runGitCommand()">Git コマンド実行</button>
      <div class="note">複数行コマンドも実行可能です。リポジトリルート: <span id="repoPathGit"></span></div>
    </div>

    <div class="section">
      <h2>Git 実行ログ</h2>
      <div style="margin-bottom: 8px;">
        <button onclick="clearLog('git')">Git ログをクリア</button>
      </div>
      <div id="git-log"></div>
    </div>

    <div class="section">
      <h2>Git 用語メモ</h2>
      <ul style="margin:0; padding-left:18px;">
        <li><strong>git status</strong>: 現在の変更点やステージ状況を確認。</li>
        <li><strong>git pull</strong>: リモートの最新を取得して現在ブランチへマージ。</li>
        <li><strong>git fetch --all --prune</strong>: すべてのリモートから取得し、不要なリモートブランチを削除。</li>
        <li><strong>git log --oneline -5</strong>: 直近 5 件のコミット履歴を簡潔に表示。</li>
        <li><strong>git diff HEAD</strong>: 作業ツリーと最新コミットとの差分を確認。</li>
        <li><strong>git add .</strong>: 作業ツリーの変更をまとめてステージに追加。</li>
        <li><strong>git commit -m "..."</strong>: ステージ済みの変更をメッセージ付きでコミット。</li>
        <li><strong>git push origin main</strong>: `origin/main` へローカルの最新コミットを送信。</li>
        <li><strong>変更をコミットしてプッシュ</strong>: `status` で差分確認→`add .`→`commit`→`push` を順に実行 (実行前にコミットメッセージを書き換えてください)。</li>
      </ul>
    </div>
  </div>
</div>
</body>
</html>
